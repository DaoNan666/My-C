// C语言经典案例100

#define _CRT_SECURE_NO_WARNINGS

//题目：有1、2、3、4个数字，能组成多少个互不相同且无重复数字的三位数？都是多少？
//
//程序分析：可填在百位、十位、个位的数字都是1、2、3、4。组成所有的排列后再去 掉不满足条件的排列。
////#include <stdio.h>
//int main() {
//	//定义三个不同变量，为所求三位数的百位十位和个位
//	int i, j, k;  
//	//利用三重for循环，将三个变量依次赋值1,2,3,4
//	for (i = 1; i < 5; i++) {    
//		for (j = 1; j < 5; j++) {
//			for (k = 1; k < 5; k++) {
//				//这里，添加限制条件，使三位数的个位，十位，百位各不相同
//				if (i != j && i != k && j != k) {
//					// 打印出符合条件的所有三位数
//					printf("%d%d%d\n", i, j, k);
//				}
//			}
//		}
//	}
//	return 0;
//}




//题目：企业发放的奖金根据利润提成。
//
//利润(I)低于或等于10万元时，奖金可提10% ；
//利润高于10万元，低于20万元时，低于10万元的部分按10% 提成，高于10万元的部分，可提成7.5 % ；
//20万到40万之间时，高于20万元的部分，可提成5 % ；
//40万到60万之间时高于40万元的部分，可提成3 % ；
//60万到100万之间时，高于60万元的部分，可提成1.5 % ；
//高于100万元时，超过100万元的部分按1 % 提成。
//从键盘输入当月利润I，求应发放奖金总数？
//
//程序分析：请利用数轴来分界，定位。注意定义时需把奖金定义成双精度浮点(double)型。
//#include <stdio.h>
//int main() {
//	//定义变量i，为当月的利润
//	double i; 
//	//根据利润分段，定义出各个段的提成变量,其中a为最终所求提成
//	double a1, a2, a4, a6, a10, a;
//	//这里的输入单位为：元
//	printf("当月利润为：\n"); 
//	//  输入当月的利润，注意这里是double型，所以是%lf
//	scanf("%lf", &i); 
//	// 利润高于10万元，低于20万元时，低于10万元的部分按10%提成
//	a1 = 100000 * 0.1; 
//	//利润高于10万元，低于20万元时，高于10万元的部分，可提成7.5%
//	a2 = a1 + 100000 * 0.075;
//	//20万到40万之间时，高于20万元的部分，可提成5%；
//	a4 = a2 + 200000 * 0.05;
//	//40万到60万之间时高于40万元的部分，可提成3%
//	a6 = a4 + 200000 * 0.03; 
//	//60万到100万之间时，高于60万元的部分，可提成1.5%
//	a10 = a6 + 400000 * 0.015; 
//	if (i <= 100000) {
//		a = i * 0.1;
//		//当利润低于10万元时
//	}
//	else if (i <= 200000) {
//		a = a1 + (i - 100000) * 0.075; 
//		//当利润高于10万，低于20万元时
//	}
//	else if (i <= 400000) {
//		a = a2 + (i - 200000) * 0.05; 
//		// 当利润高于20万元，低于40万元时
//	}
//	else  if (i <= 600000) {
//		a = a4 + (i - 400000) * 0.03; 
//		//当利润高于40万元，低于60万元时
//	}
//	else if (i <= 1000000) {
//		a = a6 + (i - 600000) * 0.015; 
//		//当利润高于60万元，低于100万元时
//	}
//	else if (i > 1000000) {
//		a = a10 + (i - 1000000) * 0.01; 
//		//当利润高于100万元时
//	}
//	printf("当月提成为：%lf\n", a);
//		return 0;
//}


//题目：一个整数，它加上100后是一个完全平方数，再加上168又是一个完全平方数，请问该数是多少？
//#include <stdio.h>
//#include <math.h>
////将此题限制在数100000以内
//#define Max 100000
//
//int main() {
//	int i, j, k;
//	//在100000内，循环查找符合条件的数
//	for (i = 1; i < Max; i++) {
//		//sqrt为开平方函数，需要头文件<math.h>
//		j = sqrt(i + 100);
//		k = sqrt(i + 268);
//		// 所求数必须同时符合以下两个条件
//		if (j * j == i + 100 && k * k == i + 268) {
//			//打印出符合条件的数（在100000内）
//			printf("%d\n", i);
//		}
//	}
//
//	return 0;
//}

//题目：输入某年某月某日，判断这一天是这一年的第几天？
//
//程序分析：以3月5日为例，应该先把前两个月的加起来，然后再加上5天即本年的第几天，特殊情况，闰年且输入月份大于3时需考虑多加一天。
////#include <stdio.h>
//int main() {
//	int day, month, year;// 定义变量年月日
//	int sum = 0;//最终结果以sum输出
//	int leap; //若出现闰年，则该年2月份后天数要加1
//	printf("请依次输入年，月，日，中间以空格隔开（例如：2022 3 13）：\n");
//	scanf("%d%d%d", &year, &month, &day);
//	switch (month) {
//	case 1:sum = 0; break; //第一个月，直接以当月天数day为结果
//	case 2:sum = 31; break;//第二月在一月31天基础上，加上本月天数day为结果
//	case 3:sum = 59; break;//依次类推
//	case 4:sum = 90; break;
//	case 5:sum = 120; break;
//	case 6:sum = 151; break;
//	case 7:sum = 181; break;
//	case 8:sum = 212; break;
//	case 9:sum = 243; break;
//	case 10:sum = 273; break;
//	case 11:sum = 304; break;
//	case 12:sum = 334; break;
//	default:printf("输入有误"); break;
//	}
//	// 最终结果为已过去月份总天数，加上本月天数
//	 sum =sum + day; 
//	 //补充：闰年判断方法
//	 //1.能被4整除并且不能被100整除是闰年
//	 //2.能被400整除是闰年
//	if (year % 400 == 0 || (year % 4 == 0 && year % 100 != 0)) {
//		leap = 1;  //判断本年是否为闰年，若是，则leap赋值1，若不是，赋值0
//	}
//	else {
//		leap = 0;
//	}
//	if (leap == 1 && month > 2) {
//		sum++; //若leap为1，且月份大于2，说明本年为闰年，最终结果要多加1天
//	}
//	printf("这是这一年的第%d天\n", sum);
//	return 0;
//}



/*题目：输入三个整数x, y, z，请把这三个数由小到大输出。

程序分析：我们想办法把最小的数放到x上，先将x与y进行比较，如果x > y则将x与y的值进行交换，然后再用x与z进行比较，如果x > z则将x与z的值进行交换，这样能使x最小*/
//#include <stdio.h>
//int main() {
//	int x, y, z, temp;
//	printf("请输入三个整数：\n");
//	scanf("%d%d%d", &x, &y, &z);
//	// 整体思路为将最小值赋给x，最大值赋给z
//	if (x > y) {
//		// 若x比y大，交换x与y，使x始终最小
//		temp = x;
//		x = y;
//		y = temp;
//	}
//	if (x > z) {
//		// 若x比z大，交换x与z，使x始终最小
//		temp = x;
//		x = z;
//		z = temp;
//	}
//	if (y > z) {
//		//此时，最小值为x，则将次小值赋给y，最大值赋给z
//		temp = y;
//		y = z;
//		z = temp;
//	}
//	printf("从小到大输出为：%d %d %d", x, y, z);
//	return 0;
//}



//#include<stdio.h>
//int main()
//{
//    char a = 176, b = 219;
//    printf("%c%c%c%c%c\n", b, a, a, a, b);
//    printf("%c%c%c%c%c\n", a, b, a, b, a);
//    printf("%c%c%c%c%c\n", a, a, b, a, a);
//    printf("%c%c%c%c%c\n", a, b, a, b, a);
//    printf("%c%c%c%c%c\n", b, a, a, a, b);
//    return 0;
//}

//
////题目：输出9*9口诀。
//
//程序分析：分行与列考虑，共 9 行 9 列，i 控制行，j 控制列。
//#include <stdio.h>
//
////自定义printf_table函数
//void printf_table(int n) {
//	//这里和前面99乘法表原理相同
//	int i = 0;
//	for (i = 1; i <= n; i++) {
//		int j = 0;
//		for (j = 1; j <= i; j++) {
//			printf("%d*%d=%d ", i, j, i * j);
//		}
//		printf("\n");
//	}
//}
//int main() {
//	int n = 0;
//	// 输入一个数n
//	scanf("%d", &n);
//	//调用自定义函数printf_table，将参数n传入函数中
//	printf_table(n);
//	return 0;
//}

//方法一
//int main() {
//	int i, j, ret;
//	// 利用i来控制行数
//	for (i = 1; i < 10; i++) {
//		//在i控制下，用j来控制列数
//		for (j = 1; j <= i; j++) {
//			//最终结果以ret输出
//			ret = i * j;
//			//这里的-3d，是为了将输出内容对齐，更加美观
//			printf("%d * %d = %-3d", i, j, ret);
//		}
//		//一行结束后，换行
//		printf("\n");
//	}
//	return 0;
//}
